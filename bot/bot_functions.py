from model_manager import ModelManager
from datetime import datetime
from config import DEFAULT_ADMIN_ID, MEDIUM_THREAT_LEVEL, HIGH_THREAT_LEVEL
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import asyncio
from utils.db_utils import create_connection, add_user, save_message, fetch_admins, report_message, make_admin, get_reported_messages
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
model_manager = ModelManager()

USER_CLASSES = {
    0 : 'ORD',
    1 : 'SPEC'
}

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f'/start command received from user {update.effective_user.id}')
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.')

async def check_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username
    timestamp = datetime.now()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    add_user(conn, user_id, username)
    logger.info(f'Processing message from user {user_id}: "{message}"')

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏
    predictions = model_manager.predict_all(message)
    combined = model_manager.get_combined_prediction(message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    prediction_result = "–§–∏—à–∏–Ω–≥" if combined >= 0.85 else "–û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ"
    message_id = save_message(conn, user_id, message, prediction_result)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    risk_score = min(100, max(0, int(combined * 100)))
    risk_level = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if risk_score >= 85 else ("üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" if risk_score >= 40 else "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = f"üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {prediction_result}\n\n"
    response += f"üõ° –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_score}% ({risk_level})\n\n"
    response += "–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:\n"
    for name, pred in predictions.items():
        prob = pred["probability"] or 0
        weight = pred["weight"]
        response += f'- {name}: {prob * 100:.1f}% (–í–µ—Å: {weight})\n'

    # –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if combined >= HIGH_THREAT_LEVEL:
        admin_ids = fetch_admins(conn)
        notification = f"üÜò –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Ñ–∏—à–∏–Ω–≥.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}, ID: {user_id}.\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n {message}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}."
        for admin_id in admin_ids:
            await context.bot.send_message(chat_id=admin_id, text=notification)
        logger.warning(f'Suspicious message detected from user {user_id}')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "report"
    keyboard = [
        [InlineKeyboardButton("üëé Report", callback_data=f'report:{message_id}')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(response, reply_markup=reply_markup)
    logger.info(f'Message processed successfully for user {user_id}')

    conn.close()

async def report_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    if update.message.reply_to_message is None:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/report' –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    message_id = update.message.reply_to_message.message_id
    reporter_id = update.effective_user.id
    reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∑–∏–ª –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."

    conn = create_connection()
    report_message(conn, message_id, reporter_id, reason)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    logger.info(f'Reported message {message_id} by user {reporter_id}')
    conn.close()

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    print(query.data)
    # –ü–∞—Ä—Å–∏–º callback_data
    action, message_id = query.data.split(':')

    if action == 'report':
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
        user_id = query.from_user.id
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE messages SET reviewed=FALSE WHERE id=?", (message_id,))
        conn.commit()
        conn.close()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ñ–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!")
        logger.info(f'Button callback triggered for message {message_id}')

async def make_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    args = context.args

    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /make_admin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return
    telegram_id = int(args[0])

    conn = create_connection()
    make_admin(conn, telegram_id)
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    logger.info(f'User {telegram_id} promoted to admin')
    conn.close()

def set_default_admin():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    conn = create_connection()

    def user_exists_and_is_admin(conn, telegram_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        cursor = conn.cursor()
        cursor.execute("SELECT admin FROM users WHERE telegram_id=?", (telegram_id,))
        result = cursor.fetchone()
        return bool(result and result[0])  # True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    if not user_exists_and_is_admin(conn, DEFAULT_ADMIN_ID):
        add_user(conn,DEFAULT_ADMIN_ID)
        make_admin(conn, DEFAULT_ADMIN_ID)
        logger.info(f'Default admin {DEFAULT_ADMIN_ID} initialized')
    else: 
        logger.info(f'Default admin {DEFAULT_ADMIN_ID} already initialized')
    conn.close()

def is_admin(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_id = update.effective_user.id
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT admin FROM users WHERE telegram_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return bool(result and result[0])


async def show_reports_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—è—Ç—å —Ä–µ–ø–æ—Ä—Ç–Ω—É—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = create_connection()
    reports = get_reported_messages(conn)
    if not reports:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
        return

    for report in reports:
        message_id, content, created_at, current_prediction = report
        buttons = [
            [InlineKeyboardButton("–§–∏—à–∏–Ω–≥", callback_data=f'set_fish:{message_id}'),
             InlineKeyboardButton("–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data=f'set_safe:{message_id}')],
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{content}\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_prediction}\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {created_at}",
                                       reply_markup=reply_markup)

    conn.close()


async def process_admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('FUCK')
    query = update.callback_query
    choice, message_id = query.data.split(':')
    print(choice,' ', message_id)
    conn = create_connection()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if choice == 'set_fish':
        new_status = "–§–∏—à–∏–Ω–≥"
    elif choice == 'set_safe':
        new_status = "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∏—Å—å–º–æ"
    else:
        await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
    cursor = conn.cursor()
    cursor.execute("UPDATE messages SET prediction=?, reviewed=TRUE WHERE id=?", (new_status, message_id))
    conn.commit()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.answer(f"–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{new_status}'")
    await query.edit_message_reply_markup(reply_markup=None)

    conn.close()

async def unified_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–∞—Ä—Å–∏–º callback_data
    action, message_id = query.data.split(':')

    if action == 'report':  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
        # –ë–µ—Ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reporter_id = query.from_user.id
        reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 'Report'"

        conn = create_connection()
        report_message(conn, message_id)
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ñ–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!")
        conn.close()

    elif action.startswith('set'):  # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ (fish/safe)
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_admin_choice
        asyncio.create_task(process_admin_choice(update, context))

    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)


async def undo_admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø –æ–∂–∏–¥–∞–Ω–∏—è."""
    query = update.callback_query
    _, message_id = query.data.split(':')

    conn = create_connection()
    undo_admin_decision(conn, message_id)
    conn.close()

    await query.answer("–†–µ—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
    await query.edit_message_reply_markup(reply_markup=None)