from telegram import Update
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ApplicationBuilder, CommandHandler, ContextTypes, filters, CallbackContext, MessageHandler
from User import User 
from config import TOKEN, SUSPICIOUS_PATTERNS
from datetime import datetime
from utils import *
from model_manager import ModelManager

# –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = create_connection()

# –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
model_manager = ModelManager()

USER_CLASSES = {
    0 : 'ORD',
    1 : 'SPEC'
}

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}. –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.')

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = User(update.effective_user.id, update.effective_user.first_name, USER_CLASSES[0])
    user.print_info()
    await update.message.reply_text(f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {user.user_role}')

async def check_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username
    timestamp = datetime.now()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection()
    add_user(conn, user_id, username)

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏
    predictions = model_manager.predict_all(message)
    combined = model_manager.get_combined_prediction(message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    prediction_result = "–§–∏—à–∏–Ω–≥" if combined >= 0.85 else "–û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ"
    message_id = save_message(conn, user_id, message, prediction_result)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    risk_score = min(100, max(0, int(combined * 100)))
    risk_level = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if risk_score >= 85 else ("üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" if risk_score >= 40 else "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = f"üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {prediction_result}\n\n"
    response += f"üõ° –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_score}% ({risk_level})\n\n"
    response += "–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:\n"
    for name, pred in predictions.items():
        prob = pred["probability"] or 0
        weight = pred["weight"]
        response += f'- {name}: {prob * 100:.1f}% (–í–µ—Å: {weight})\n'

    # –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if combined >= 0.85:
        admin_ids = fetch_admins(conn)
        notification = f"üÜò –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Ñ–∏—à–∏–Ω–≥.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}, ID: {user_id}.\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}."
        for admin_id in admin_ids:
            await context.bot.send_message(chat_id=admin_id, text=notification)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "report"
    keyboard = [
        [InlineKeyboardButton("üëé Report", callback_data=f'report_{message_id}')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # await update.message.reply_markdown_v2(response)
    await update.message.reply_text(response, reply_markup=reply_markup)

    conn.close()

async def report_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_id = update.message.reply_to_message.message_id
    reporter_id = update.effective_user.id
    reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∑–∏–ª –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."

    conn = create_connection()
    report_message(conn, message_id, reporter_id, reason)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    conn.close()

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–∞—Ä—Å–∏–º callback_data
    action, message_id = query.data.split('_')

    if action == 'report':
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏–º –∂–∞–ª–æ–±—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = query.from_user.id
        conn = create_connection()
        report_message(conn, message_id, user_id, reason="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 'report'")
        conn.close()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ñ–∞–ª–æ–±–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!")

async def make_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /make_admin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return
    telegram_id = int(args[0])

    conn = create_connection()
    make_admin(conn, telegram_id)
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    conn.close()

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", hello))
    app.add_handler(CommandHandler("role", role))
    app.add_handler(CommandHandler("report", report_message_command))
    app.add_handler(CommandHandler("make_admin", make_admin_command))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_email))

    print("Bot started.")
    app.run_polling()