from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, filters, CallbackContext, MessageHandler
from User import User 
from config import TOKEN, SUSPICIOUS_PATTERNS
import pickle
from utils import load_model
from text_processor import TextPreprocessor
from model_manager import ModelManager


model_manager = ModelManager()

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
# lr_model = load_model('models/lr_C_1.pkl')
# dt_model = load_model('models/dt.pkl')

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ LSTM
# with open('models/lstm_best.pkl', 'rb') as f:
#     lstm_data = pickle.load(f)
#     lstm_model = lstm_data['model']  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å Keras

secure_users = []

USER_CLASSES = {
    0 : 'ORD',
    1 : 'SPEC'
}

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'Hello {update.effective_user.first_name}')

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = User(update.effective_user.id, update.effective_user.first_name, USER_CLASSES[0])
    user.print_info()
    await update.message.reply_text(f'Your role is: {user.user_role}')


async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = User(update.effective_user.id, update.effective_user.first_name, USER_CLASSES[1])
    user.user_type = USER_CLASSES[1]
    secure_users.append(user)
    user.print_info()
    return None

from config import SUSPICIOUS_PATTERNS

# async def check_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
#     with open('encoders/tfidf_vectorizer.pkl', 'rb') as f:
#         vectorizer = pickle.load(f)
#     with open('encoders/label_encoder.pkl', 'rb') as f:
#         label_encoder = pickle.load(f)
    
#     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
#     preprocessor = TextPreprocessor()
    
#     # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
#     raw_text = update.message.text
#     cleaned_text = preprocessor.clean_text(raw_text)
    
#     # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
#     X = vectorizer.transform([cleaned_text])
    
#     # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è LR
#     lr_prob = lr_model.predict_proba(X)[0][1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (—Ñ–∏—à–∏–Ω–≥)

#     # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è DT
#     dt_prob = dt_model.predict_proba(X)[0][1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (—Ñ–∏—à–∏–Ω–≥)
    
#     # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è DT
#     lstm_prob = lstm_model.predict(X)[0][0]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (—Ñ–∏—à–∏–Ω–≥)

#     # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Å–∞)
#     combined_prob = (lr_prob * 0.45 + dt_prob * 0.15 + lstm_prob * 0.4)
#     # combined_pred = 1 if combined_prob > 0.5 else 0
#     risk_score = int(combined_prob * 100)
#     risk_status = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if risk_score > 70 else \
#              "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" if risk_score > 30 else "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    
#     # –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
#     detected_patterns = {}
#     for pattern, reason in SUSPICIOUS_PATTERNS.items():
#         if pattern in raw_text.lower():  # –ü–æ–∏—Å–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (–±–µ–∑ –æ—á–∏—Å—Ç–∫–∏)
#             detected_patterns[pattern] = reason
    
#     # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π
#     response = (
#         f"üõ°Ô∏è –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ —Ñ–∏—à–∏–Ω–≥–∞: {risk_score}% ({risk_status})\n"
#         f"LR –º–æ–¥–µ–ª—å: {'‚ö†Ô∏è Phishing' if lr_model.predict(X)[0] == 1 else '‚úÖ Ham'} ({int(lr_prob*100)}%)\n"
#         f"DT –º–æ–¥–µ–ª—å: {'‚ö†Ô∏è Phishing' if dt_model.predict(X)[0] == 1 else '‚úÖ Ham'} ({int(dt_prob*100)}%)\n"
#         f"LSTM –º–æ–¥–µ–ª—å: {'‚ö†Ô∏è Phishing' if lstm_model.predict(X)[0] == 1 else '‚úÖ Ham'} ({int(lstm_prob*100)}%)\n"
#     )
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
#     if detected_patterns:
#         response += "\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã:\n"
#         for pattern, reason in detected_patterns.items():
#             response += f"- {pattern}: {reason}\n"
    
#     await update.message.reply_text(response)
async def check_email(update: Update, context: ContextTypes.DEFAULT_TYPE):

    text = update.message.text
    predictions = model_manager.predict_all(text)
    combined = model_manager.get_combined_prediction(text)
    
    response = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
    for name, pred in predictions.items():
        if pred['probability'] is not None:
            response += f"{name}: {pred['probability']*100:.1f}% (–≤–µ—Å: {pred['weight']})\n"
    
    risk_score = min(100, max(0, int(combined * 100)))
    risk_status = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if risk_score > 70 else \
                    "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" if risk_score > 30 else "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    
    response += f"\nüõ°Ô∏è –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: {risk_score}% ({risk_status})"
    # –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤ —Ç–µ–∫—Å—Ç–µ
    detected_patterns = {}
    for pattern, reason in SUSPICIOUS_PATTERNS.items():
        if pattern.lower() in text.lower():
            detected_patterns[pattern] = reason
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    marked_text = text
    for pattern in detected_patterns:
        marked_text = marked_text.replace(pattern, f"‚ùó{pattern}‚ùó")        
    if detected_patterns:
        response += "\n\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã:\n"
        for pattern, reason in detected_patterns.items():
            response += f"- {pattern}: {reason}\n"
        
    response += f"\nüìù –¢–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º:\n{marked_text}"
        
    await update.message.reply_text(response)
    
        
  
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", hello))
app.add_handler(CommandHandler("get_info", role))
app.add_handler(CommandHandler("set_role", set_role))
app.add_handler(MessageHandler(None, check_email))


app.run_polling()